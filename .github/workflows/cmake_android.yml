name: CMake android

on: [push]

jobs:
  use_install_qt:
    name: use install qt ${{ matrix.os }}-${{matrix.VCPKG_TARGET_TRIPLET}}-${{ matrix.BUILD_TYPE }}

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        os: [Ubuntu-20.04]
        qt_version: [5.12.11]
        VCPKG_TARGET_TRIPLET: [arm-android]
        qt_arch: [android_armv7]
        ANDROID_ABI: [armeabi-v7a]
#          - VCPKG_TARGET_TRIPLET: x86-android
#            qt_arch: android_x86

    runs-on: ${{ matrix.os }}

    env:
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      SOURCE_DIR:  ${{github.workspace}}/source
      TOOSL_DIR:   ${{github.workspace}}/tools
      INSTALL_DIR: ${{github.workspace}}/install

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: initial
      run: |
        echo "ANDROID_NDK_HOME:$ANDROID_NDK_HOME"
        export VCPKG_CHAINLOAD_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake
        export PATH=$ANDROID_NDK_HOME:$ANDROID_NDK_HOME/bin:$PATH
        echo "PATH:$PATH"
        cmake -E make_directory ${{env.SOURCE_DIR}}
        cmake -E make_directory ${{env.TOOSL_DIR}}
        cmake -E make_directory ${{env.INSTALL_DIR}}
        
    - name: apt helper action
      uses: ryankurte/action-apt@v0.2.0
      with:
        # architectures to pass to dpkg --add-architecture
        #architectures: # optional
        # apt packages to install
        packages: yasm nasm

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v7.4
      with:
        # Indicates whether to only setup vcpkg (i.e. installing it and setting the environment variables VCPKG_ROOT, RUNVCPK_VCPKG_ROOT), without installing any port.
        #setupOnly: # optional
        #vcpkgGitURL: https://github.com/KangLin/vcpkg.git
        vcpkgGitCommitId: 973a7d517c09c8cfb7e6a548fcc260ca34ba7b60
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
        # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
        # compute its hash and append this to the computed cache's key.
        appendedCacheKey:  ${{ hashFiles( env.VCPKGRESPONSEFILE ) }}
        additionalCachedPaths: $VCPKG_ROOT/installed
        vcpkgTriplet: '${{ matrix.VCPKG_TARGET_TRIPLET }}'
        vcpkgArguments: 'zlib openssl'

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1  # not v2!
      with:
        path: ${{env.TOOSL_DIR}}/qt
        key: ${{ matrix.os }}-${{matrix.VCPKG_TARGET_TRIPLET}}-QtCache
        
    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@a962fb91949c8e846a3e4a944d50e7ef5cc3a28a
      uses: jurplel/install-qt-action@v2.11.1
      with:
        # Directory to install Qt
        dir: ${{env.TOOSL_DIR}}/qt # optional
        # Version of Qt to install
        version: ${{matrix.qt_version}} # optional, default is 5.15.2
        # Host platform
        #host: linux # optional
        # Target platform for build
        target: android # optional, default is desktop
        # Architecture for Windows/Android
        arch: ${{matrix.qt_arch}} # optional
        # Whether or not to install Qt dependencies on Linux
        #install-deps: true # optional, default is true
        # Additional Qt modules to install
        modules: ${{matrix.qt_modules}} # optional
        # Force a Qt mirror in case the default is not working
        #mirror: # optional
        # Whether or not to actually download Qt
        cached: ${{ steps.cache-qt.outputs.cache-hit }} # optional, default is false
        # Whether or not to automatically run setup-python to find a valid python version.
        #setup-python: false # optional, default is true
        # Qt tools to download--specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>
        #tools: # optional
        # Whether or not to actually install Qt or just the tools from the tools argument
        #tools-only: false # optional, default is false
        # Version of aqtinstall to use in case of issues
        #aqtversion: # optional, default is ==0.10.0
        # Version of py7zr to use in case of issues
        #py7zrversion: # optional, default is ==0.11.0
        # Any extra arguments to append to the back
        #extra: # optional

    - name: build log4qt
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        git clone -b v1.5.1 "https://github.com/MEONMedical/Log4Qt.git"
        cd Log4Qt
        cmake -E make_directory build
        cd build
        cmake ..  -DQt5_DIR=${Qt5_Dir} -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake -DANDROID_ABI=${{matrix.ANDROID_ABI}} -DVCPKG_TARGET_ANDROID=ON
        cmake --build . --config ${{matrix.BUILD_TYPE}}
        cmake --build . --config ${{matrix.BUILD_TYPE}} --target install

    - name: build RabbitCommon
      env:
        RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake ${{github.workspace}}  -DQt5_DIR=${Qt5_Dir} -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/install -DLog4Qt_DIR=/lib/cmake/Log4Qt -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake -DANDROID_ABI=${{matrix.ANDROID_ABI}} -DVCPKG_TARGET_ANDROID=ON
        cmake --build . --config ${{ matrix.BUILD_TYPE }}
        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install
        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target APK
