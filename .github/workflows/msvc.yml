# Author: Kang Lin<kl222@126.com>

name: build_msvc

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_msvc.outputs.name }}

jobs:
  build_msvc:

    strategy:
      matrix:
        include:
          - CMAKE_GENERATOR_PLATFORM: x64
            VCPKG_TARGET_TRIPLET: x64-windows
            VCPKG_PLATFORM_TOOLSET: v143
            qt_version: 6.9.2
            qt_arch: win64_msvc2022_64
            qt_modules: qtscxml
            os: windows-latest

          - CMAKE_GENERATOR_PLATFORM: arm64
            VCPKG_TARGET_TRIPLET: arm64-windows
            VCPKG_PLATFORM_TOOLSET: v143
            qt_version: 6.9.2
            qt_arch: win64_msvc2022_arm64
            qt_modules: qtscxml
            os: windows-11-arm

          - CMAKE_GENERATOR_PLATFORM: x64
            VCPKG_TARGET_TRIPLET: x64-windows
            VCPKG_PLATFORM_TOOLSET: v143
            qt_version: 5.15.2
            qt_arch: win64_msvc2019_64
            os: windows-latest

          - CMAKE_GENERATOR_PLATFORM: Win32
            VCPKG_TARGET_TRIPLET: x86-windows
            VCPKG_PLATFORM_TOOLSET: v143
            VCPKG_MANIFEST_DIR: "\\vcpkg\\manifests"
            qt_version: 5.15.2
            qt_arch: win32_msvc2019
            os: windows-latest

    # See: [About GitHub-hosted runners](https://docs.github.com/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners)
    # See: [Choosing the runner for a job](https://docs.github.com/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job)
    # See: https://github.com/actions/runner-images/
    runs-on: ${{matrix.os}}

    env:
      BUILD_DIR:   ${{github.workspace}}\build
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_GENERATOR_PLATFORM: ${{matrix.CMAKE_GENERATOR_PLATFORM}}
      VCPKGGITCOMMITID: 59aeb8fe8fe1c980de6bd5ba634cf21024522d81
      VCPKG_TARGET_TRIPLET: ${{matrix.VCPKG_TARGET_TRIPLET}}
      VCPKG_PLATFORM_TOOLSET: ${{matrix.VCPKG_PLATFORM_TOOLSET}}
      VCPKG_MANIFEST_DIR: "${{github.workspace}}${{matrix.VCPKG_MANIFEST_DIR}}"
      RabbitCommon_VERSION: v2.3.3
      qt_modules: ${{matrix.qt_modules}}
      artifact_name: build_msvc

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}
      
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make directories
        run: |
          cmake -E make_directory ${{github.workspace}}/build
          cmake -E make_directory ${{github.workspace}}/build_test
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOSL_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}

      - name: Cache installed
        uses: actions/cache@v4
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: install_msvc_qt${{matrix.qt_version}}_${{matrix.qt_arch}}_Release
      
      - name: Install Qt
        # You may pin to the exact commit or the version.
        # uses: jurplel/install-qt-action@a962fb91949c8e846a3e4a944d50e7ef5cc3a28a
        uses: jurplel/install-qt-action@v4
        with:
          # Directory to install Qt
          dir: ${{env.TOOSL_DIR}}\qt # optional
          # Version of Qt to install
          version: ${{matrix.qt_version}} # optional, default is 5.15.2
          # Host platform
          #host: linux # optional
          # Target platform for build
          #target: desktop # optional, default is desktop
          # Architecture for Windows/Android
          arch: ${{matrix.qt_arch}} # optional
          # Whether or not to install Qt dependencies on Linux
          #install-deps: true # optional, default is true
          # Additional Qt modules to install
          modules: ${{env.qt_modules}} # optional. See: https://ddalcino.github.io/aqt-list-server/
          # Force a Qt mirror in case the default is not working
          #mirror: # optional
          # Whether or not to actually download Qt
          cache: true
          cache-key-prefix: cached_qt

      - name: run vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          # Indicates whether to only setup vcpkg (i.e. installing it and setting the environment variables VCPKG_ROOT, RUNVCPK_VCPKG_ROOT), without installing any port.
          #setupOnly: # optional
          #vcpkgGitURL: https://github.com/KangLin/vcpkg.git
          vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
          vcpkgDirectory: ${{runner.workspace}}/vcpkg/

      - name: Build and test
        working-directory: ${{github.workspace}}/build_test
        run: |
          cd ${{github.workspace}}/build_test
          cmake ${{github.workspace}} ^
              -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
              -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
              -DCMARK_SHARED=OFF ^
              -DCMARK_TESTS=OFF ^
              -DCMARK_STATIC=ON ^
              -DCMAKE_BUILD_TYPE=Release ^
              -DCMAKE_INSTALL_PREFIX=%CD%/install ^
              -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }}/lib/cmake ^
              -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake ^
              -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON ^
              -DRABBIT_ENABLE_INSTALL_DEPENDENT=ON ^
              -DRABBIT_ENABLE_INSTALL_QT=ON ^
              -DRABBIT_ENABLE_INSTALL_TO_BUILD_PATH=ON ^
              -DBUILD_APP=ON ^
              -DBUILD_TEST=ON
          cmake --build . --config Release --target install

      - name: test
        working-directory: ${{github.workspace}}/build_test
        if: false
        run: |
          echo "xcopy /Y /S install\bin bin\Release"
          xcopy /Y /S install\bin bin\Release
          echo "xcopy /Y /S ${{env.VCPKG_DEFAULT_BINARY_CACHE}}/bin/*.dll bin\Release"
          xcopy /Y /S ${{env.VCPKG_DEFAULT_BINARY_CACHE}}/bin/*.dll bin\Release 
          ctest -C Release -VV
      
      - name: Build RabbitCommon
        working-directory: ${{github.workspace}}/build
        run: |
          cd ${{github.workspace}}/build
          cmake ${{github.workspace}} ^
              -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
              -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
              -DCMARK_SHARED=OFF ^
              -DCMARK_TESTS=OFF ^
              -DCMARK_STATIC=ON ^
              -DCMAKE_BUILD_TYPE=Release ^
              -DCMAKE_INSTALL_PREFIX=%CD%/install ^
              -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }}/lib/cmake  ^
              -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake ^
              -DX_VCPKG_APPLOCAL_DEPS_INSTALL:BOOL=ON ^
              -DRABBIT_ENABLE_INSTALL_DEPENDENT=OFF ^
              -DRABBIT_ENABLE_INSTALL_QT=OFF ^
              -DRABBIT_ENABLE_INSTALL_TO_BUILD_PATH=OFF ^
              -DBUILD_APP=OFF ^
              -DBUILD_TEST=OFF
          cmake --build . --config Release
          cmake --build . --config Release --target install

      - name: Package
        working-directory: ${{github.workspace}}\build
        run: |
          cmake --build . --config Release --target package
          copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
          copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
          copy /Y ${{env.RUNVCPKG_VCPKG_ROOT}}\installed\${{env.RUNVCPKG_VCPKG_TRIPLET_OUT}}\bin\*.dll install\bin
          7z a RabbitCommon_${{env.RabbitCommon_VERSION}}_msvc_${{matrix.CMAKE_GENERATOR_PLATFORM}}_qt${{matrix.qt_version}}_Release.zip .\install\*

      - name: Update artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}_${{matrix.qt_version}}_${{matrix.qt_arch}}
          path: |
            ${{github.workspace}}\build\RabbitCommon_${{env.RabbitCommon_VERSION}}_msvc_${{matrix.CMAKE_GENERATOR_PLATFORM}}_qt${{matrix.qt_version}}_Release.zip
